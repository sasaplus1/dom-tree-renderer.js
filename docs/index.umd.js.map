{"version":3,"file":"index.umd.js","sources":["../src/utility.ts","../src/text.ts"],"sourcesContent":["/** regex for escape control characters  */\nexport const escapeControlCharacterRegex = /[\\0\\b\\f\\n\\r\\t\\v]/g\n\n/**\n * escape control characters for String.replace\n *\n * @param match - match text\n * @returns replaced text\n */\nexport function escapeControlCharacter(match: string): string {\n  switch (match) {\n    case '\\0': return '\\\\0';\n    case '\\b': return '\\\\b';\n    case '\\f': return '\\\\f';\n    case '\\n': return '\\\\n';\n    case '\\r': return '\\\\r';\n    case '\\t': return '\\\\t';\n    case '\\v': return '\\\\v';\n    default: return match;\n  }\n}\n","import { escapeControlCharacterRegex, escapeControlCharacter } from './utility';\n\n/** tree shapes */\nexport type TreeShape = {\n  Empty: string;\n  I: string;\n  L: string;\n  T: string;\n};\n\n/** treeText() options */\nexport type Options = {\n  renderNode: (node: Node) => string;\n  shapes: TreeShape;\n};\n\ntype CarryOverParams = {\n  depth: number;\n  isLastSibling: boolean;\n  prefix: string;\n};\n\n/**\n * default renderNode function\n *\n * @param node - DOM node\n * @returns rendered node text\n */\nexport function defaultRenderNode(node: Node): string {\n  return (node.nodeType === Node.TEXT_NODE)\n    ? (node.textContent || '').replace(escapeControlCharacterRegex, escapeControlCharacter)\n    : node.nodeName.toLowerCase();\n}\n\n/** shape texts by ASCII */\nexport const asciiShapes = {\n  Empty: '   ',\n  I: '|  ',\n  L: '|- ',\n  T: '|- ',\n} as const satisfies TreeShape;\n\n/** shape texts by Unicode */\nexport const unicodeShapes = {\n  Empty: '   ',\n  I: '│  ',\n  L: '└─ ',\n  T: '├─ ',\n} as const satisfies TreeShape;\n\n/** textTree() default options */\nexport const defaultOptions: Options = {\n  renderNode: defaultRenderNode,\n  shapes: { ...asciiShapes }\n};\n\n/**\n * render DOM tree to text\n *\n * @param node - DOM node\n * @param options - options\n * @param carryOverParams - carry over params, not for user\n * @param result - result, not for user\n * @returns DOM tree array\n * @example\n * ```js\n * textTree(document.body).join('\\n');\n * ```\n * ```js\n * textTree(document.documentElement, {\n *   renderNode(node) {\n *     return `<${node.nodeName.toLowerCase()}>`;\n *   },\n *   shapes: {\n *     Empty: '   ',\n *     I: '|  ',\n *     L: '+─ ',\n *     T: '*- ',\n *   }\n * }).join('<br>');\n * ```\n */\nexport function textTree(node: Node, options: Options = {\n  ...defaultOptions\n}, carryOverParams: CarryOverParams = {\n  depth: 0,\n  isLastSibling: false,\n  prefix: ''\n}, result: string[] = []): string[] {\n  const { renderNode, shapes } = options;\n  const {\n    Empty: emptyShape,\n    I: iShape,\n    L: lShape,\n    T: tShape\n  } = shapes;\n\n  const { depth, isLastSibling, prefix } = carryOverParams;\n\n  const isRoot = depth === 0;\n  const treeText = isRoot ? '' : isLastSibling ? lShape : tShape;\n\n  result.push(prefix + treeText + renderNode(node));\n\n  for (let i = 0, len = node.childNodes.length; i < len; i += 1) {\n    const childNode = node.childNodes[i];\n\n    if (!childNode) {\n      continue;\n    }\n\n    const childTreeText = isRoot ? '' : isLastSibling ? emptyShape : iShape;\n\n    textTree(childNode, options, {\n      depth: depth + 1,\n      isLastSibling: i === len - 1,\n      prefix: prefix + childTreeText,\n    }, result);\n  }\n\n  return result;\n}\n"],"names":["escapeControlCharacterRegex","escapeControlCharacter","match","defaultRenderNode","node","nodeType","Node","TEXT_NODE","textContent","replace","nodeName","toLowerCase","asciiShapes","Empty","I","L","T","defaultOptions","renderNode","shapes","_extends","textTree","options","carryOverParams","result","depth","isLastSibling","prefix","emptyShape","iShape","isRoot","push","i","len","childNodes","length","childNode"],"mappings":"6cACaA,IAAAA,EAA8B,oBAQrC,SAAUC,EAAuBC,GACrC,OAAQA,GACN,IAAK,KAAM,MAAO,MAClB,IAAK,KAAM,MAAO,MAClB,IAAK,KAAM,MAAO,MAClB,IAAK,KAAM,MAAO,MAClB,IAAK,KAAM,MAAO,MAClB,IAAK,KAAM,MAAO,MAClB,IAAK,KAAM,MAAO,MAClB,QAAS,OAAOA,EAEpB,CCQM,SAAUC,EAAkBC,GAChC,OAAQA,EAAKC,WAAaC,KAAKC,WAC1BH,EAAKI,aAAe,IAAIC,QAAQT,EAA6BC,GAC9DG,EAAKM,SAASC,aACpB,CAGa,IAAAC,EAAc,CACzBC,MAAO,MACPC,EAAG,MACHC,EAAG,MACHC,EAAG,OAYQC,EAA0B,CACrCC,WAAYf,EACZgB,OAAMC,EAAOR,CAAAA,EAAAA,mIA6BC,SAAAS,EAASjB,EAAYkB,EAElCC,EAIAC,QANqD,IAAnBF,IAAAA,EAAmBF,EACnDH,CAAAA,EAAAA,SACiC,IAAnCM,IAAAA,EAAmC,CACpCE,MAAO,EACPC,eAAe,EACfC,OAAQ,UACPH,IAAAA,IAAAA,EAAmB,IACpB,IAAoBL,EAAWG,EAAXH,OAEXS,EAILT,EAJFN,MACGgB,EAGDV,EAHFL,EAKMW,EAAiCF,EAAjCE,MAAOC,EAA0BH,EAA1BG,cAAeC,EAAWJ,EAAXI,OAExBG,EAAmB,IAAVL,EAGfD,EAAOO,KAAKJ,GAFKG,EAAS,GAAKJ,EAL3BP,EAFFJ,EAEEI,EADFH,IAQ8BE,EAbDI,EAAvBJ,YAamCd,IAE3C,IAAK,IAAI4B,EAAI,EAAGC,EAAM7B,EAAK8B,WAAWC,OAAQH,EAAIC,EAAKD,GAAK,EAAG,CAC7D,IAAMI,EAAYhC,EAAK8B,WAAWF,GAE7BI,GAMLf,EAASe,EAAWd,EAAS,CAC3BG,MAAOA,EAAQ,EACfC,cAAeM,IAAMC,EAAM,EAC3BN,OAAQA,GALYG,EAAS,GAAKJ,EAAgBE,EAAaC,IAM9DL,EACJ,CAED,OAAOA,CACT,kBA9E6B,CAC3BX,MAAO,MACPC,EAAG,MACHC,EAAG,MACHC,EAAG"}