{"version":3,"file":"index.umd.js","sources":["../src/dom.ts","../src/utility.ts","../src/text.ts"],"sourcesContent":["type CarryOverParams = {\n  depth: number;\n  isLastSibling: boolean;\n};\n\nexport type CreateTreeNode = (node: Node, params: CarryOverParams) => Node;\n\nexport type DomTreeOptions = {\n  createTreeNode: CreateTreeNode;\n};\n\nexport const createDetailsTreeNode: CreateTreeNode = (node): Node => {\n  const details = document.createElement('details');\n  const summary = document.createElement('summary');\n\n  summary.textContent = node.nodeName;\n  details.appendChild(summary);\n\n  return details;\n};\n\nexport const createListTreeNode: CreateTreeNode = (node): Node => {\n  const ul = document.createElement('ul');\n  const li = document.createElement('li');\n\n  li.textContent = node.nodeName;\n  ul.appendChild(li);\n\n  return ul;\n};\n\nexport function domTree(\n  node: Node,\n  options: DomTreeOptions = {\n    createTreeNode: createListTreeNode\n  },\n  carryOverParams: CarryOverParams = {\n    depth: 0,\n    isLastSibling: false\n  },\n  parent: Node = document.createDocumentFragment()\n): Node {\n  const { createTreeNode } = options;\n  const { depth } = carryOverParams;\n\n  const item = createTreeNode(node, { ...carryOverParams });\n\n  parent.appendChild(item);\n\n  for (let i = 0, len = node.childNodes.length; i < len; i += 1) {\n    const childNode = node.childNodes[i];\n\n    if (!childNode) {\n      continue;\n    }\n\n    domTree(\n      childNode,\n      options,\n      {\n        depth: depth + 1,\n        isLastSibling: i === len - 1\n      },\n      item\n    );\n  }\n\n  return parent;\n}\n","/** regex for escape control characters  */\nexport const escapeControlCharacterRegex = /[\\0\\b\\f\\n\\r\\t\\v]/g;\n\n/**\n * escape control characters for String.replace\n *\n * @param match - match text\n * @returns replaced text\n */\nexport function escapeControlCharacter(match: string): string {\n  switch (match) {\n    case '\\0':\n      return '\\\\0';\n    case '\\b':\n      return '\\\\b';\n    case '\\f':\n      return '\\\\f';\n    case '\\n':\n      return '\\\\n';\n    case '\\r':\n      return '\\\\r';\n    case '\\t':\n      return '\\\\t';\n    case '\\v':\n      return '\\\\v';\n    default:\n      return match;\n  }\n}\n","import { escapeControlCharacterRegex, escapeControlCharacter } from './utility';\n\n/** tree shapes */\nexport type TreeShape = {\n  Empty: string;\n  I: string;\n  L: string;\n  T: string;\n};\n\n/** treeText() options */\nexport type TextTreeOptions = {\n  renderNode: (node: Node) => string;\n  shapes: TreeShape;\n};\n\ntype CarryOverParams = {\n  depth: number;\n  isLastSibling: boolean;\n  prefix: string;\n};\n\n/**\n * default renderNode function\n *\n * @param node - DOM node\n * @returns rendered node text\n */\nexport function defaultRenderNode(node: Node): string {\n  return node.nodeType === Node.TEXT_NODE\n    ? (node.textContent || '').replace(\n        escapeControlCharacterRegex,\n        escapeControlCharacter\n      )\n    : node.nodeName.toLowerCase();\n}\n\n/** shape texts by ASCII */\nexport const asciiShapes = {\n  Empty: '   ',\n  I: '|  ',\n  L: '|- ',\n  T: '|- '\n} as const satisfies TreeShape;\n\n/** shape texts by Unicode */\nexport const unicodeShapes = {\n  Empty: '   ',\n  I: '│  ',\n  L: '└─ ',\n  T: '├─ '\n} as const satisfies TreeShape;\n\n/** textTree() default options */\nexport const defaultOptions: TextTreeOptions = {\n  renderNode: defaultRenderNode,\n  shapes: { ...asciiShapes }\n};\n\n/**\n * render DOM tree to text\n *\n * @param node - DOM node\n * @param options - options\n * @param carryOverParams - carry over params, not for user\n * @param result - result, not for user\n * @returns DOM tree array\n * @example\n * ```js\n * textTree(document.body).join('\\n');\n * ```\n * ```js\n * textTree(document.documentElement, {\n *   renderNode(node) {\n *     return `<${node.nodeName.toLowerCase()}>`;\n *   },\n *   shapes: {\n *     Empty: '   ',\n *     I: '|  ',\n *     L: '+─ ',\n *     T: '*- '\n *   }\n * }).join('<br>');\n * ```\n */\nexport function textTree(\n  node: Node,\n  options: TextTreeOptions = {\n    ...defaultOptions\n  },\n  carryOverParams: CarryOverParams = {\n    depth: 0,\n    isLastSibling: false,\n    prefix: ''\n  },\n  result: string[] = []\n): string[] {\n  const { renderNode, shapes } = options;\n  const { Empty: emptyShape, I: iShape, L: lShape, T: tShape } = shapes;\n\n  const { depth, isLastSibling, prefix } = carryOverParams;\n\n  const isRoot = depth === 0;\n  const treeText = isRoot ? '' : isLastSibling ? lShape : tShape;\n\n  result.push(prefix + treeText + renderNode(node));\n\n  for (let i = 0, len = node.childNodes.length; i < len; i += 1) {\n    const childNode = node.childNodes[i];\n\n    if (!childNode) {\n      continue;\n    }\n\n    const childTreeText = isRoot ? '' : isLastSibling ? emptyShape : iShape;\n\n    textTree(\n      childNode,\n      options,\n      {\n        depth: depth + 1,\n        isLastSibling: i === len - 1,\n        prefix: prefix + childTreeText\n      },\n      result\n    );\n  }\n\n  return result;\n}\n"],"names":["createListTreeNode","node","ul","document","createElement","li","textContent","nodeName","appendChild","escapeControlCharacterRegex","escapeControlCharacter","match","defaultRenderNode","nodeType","Node","TEXT_NODE","replace","toLowerCase","asciiShapes","Empty","I","L","T","defaultOptions","renderNode","shapes","_extends","details","summary","domTree","options","carryOverParams","parent","createTreeNode","depth","isLastSibling","createDocumentFragment","item","i","len","childNodes","length","childNode","textTree","result","prefix","emptyShape","iShape","isRoot","push"],"mappings":"6cAWa,IAUAA,EAAqC,SAACC,GACjD,IAAMC,EAAKC,SAASC,cAAc,MAC5BC,EAAKF,SAASC,cAAc,MAKlC,OAHAC,EAAGC,YAAcL,EAAKM,SACtBL,EAAGM,YAAYH,GAERH,CACT,EC5BaO,EAA8B,oBAQrC,SAAUC,EAAuBC,GACrC,OAAQA,GACN,IAAK,KACH,MAAO,MACT,IAAK,KACH,MAAO,MACT,IAAK,KACH,MAAO,MACT,IAAK,KACH,MAAO,MACT,IAAK,KACH,MAAO,MACT,IAAK,KACH,MAAO,MACT,IAAK,KACH,MAAO,MACT,QACE,OAAOA,EAEb,CCAM,SAAUC,EAAkBX,GAChC,OAAOA,EAAKY,WAAaC,KAAKC,WACzBd,EAAKK,aAAe,IAAIU,QACvBP,EACAC,GAEFT,EAAKM,SAASU,aACpB,CAGa,IAAAC,EAAc,CACzBC,MAAO,MACPC,EAAG,MACHC,EAAG,MACHC,EAAG,OAYQC,EAAkC,CAC7CC,WAAYZ,EACZa,OAAMC,EAAOR,CAAAA,EAAAA,4CF7CsC,SAACjB,GACpD,IAAM0B,EAAUxB,SAASC,cAAc,WACjCwB,EAAUzB,SAASC,cAAc,WAKvC,OAHAwB,EAAQtB,YAAcL,EAAKM,SAC3BoB,EAAQnB,YAAYoB,GAEbD,CACT,4EAYgB,SAAAE,EACd5B,EACA6B,EAGAC,EAIAC,QAPAF,IAAAA,IAAAA,EAA0B,CACxBG,eAAgBjC,SAEiB,IAAnC+B,IAAAA,EAAmC,CACjCG,MAAO,EACPC,eAAe,SAEF,IAAfH,IAAAA,EAAe7B,SAASiC,0BAExB,IACQF,EAAUH,EAAVG,MAEFG,GAAOJ,EAHcH,EAAnBG,gBAGoBhC,EAAIyB,EAAOK,CAAAA,EAAAA,IAEvCC,EAAOxB,YAAY6B,GAEnB,IAAK,IAAIC,EAAI,EAAGC,EAAMtC,EAAKuC,WAAWC,OAAQH,EAAIC,EAAKD,GAAK,EAAG,CAC7D,IAAMI,EAAYzC,EAAKuC,WAAWF,GAE7BI,GAILb,EACEa,EACAZ,EACA,CACEI,MAAOA,EAAQ,EACfC,cAAeG,IAAMC,EAAM,GAE7BF,EAEH,CAED,OAAOL,CACT,wEEiBgB,SAAAW,EACd1C,EACA6B,EAGAC,EAKAa,QAR2B,IAA3Bd,IAAAA,EAA2BJ,EACtBH,CAAAA,EAAAA,SAE8B,IAAnCQ,IAAAA,EAAmC,CACjCG,MAAO,EACPC,eAAe,EACfU,OAAQ,UAEVD,IAAAA,IAAAA,EAAmB,IAEnB,IAAoBnB,EAAWK,EAAXL,OACLqB,EAAgDrB,EAAvDN,MAAsB4B,EAAiCtB,EAApCL,EAEnBc,EAAiCH,EAAjCG,MAAOC,EAA0BJ,EAA1BI,cAAeU,EAAWd,EAAXc,OAExBG,EAAmB,IAAVd,EAGfU,EAAOK,KAAKJ,GAFKG,EAAS,GAAKb,EALgCV,EAAzBJ,EAAyBI,EAAdH,IAOjBE,EARDM,EAAvBN,YAQmCvB,IAE3C,IAAK,IAAIqC,EAAI,EAAGC,EAAMtC,EAAKuC,WAAWC,OAAQH,EAAIC,EAAKD,GAAK,EAAG,CAC7D,IAAMI,EAAYzC,EAAKuC,WAAWF,GAE7BI,GAMLC,EACED,EACAZ,EACA,CACEI,MAAOA,EAAQ,EACfC,cAAeG,IAAMC,EAAM,EAC3BM,OAAQA,GARUG,EAAS,GAAKb,EAAgBW,EAAaC,IAU/DH,EAEH,CAED,OAAOA,CACT,kBAnF6B,CAC3BzB,MAAO,MACPC,EAAG,MACHC,EAAG,MACHC,EAAG"}